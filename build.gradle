plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.palantir.docker' version '0.34.0'
	id 'com.palantir.docker-run' version '0.34.0'
	id 'jp.classmethod.aws.reboot.cloudformation' version '0.45'
}

group = 'br.com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'mysql:mysql-connector-java:8.0.32'
	testCompileOnly 'junit:junit:4.13.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	systemProperty 'spring.profiles.active', 'qa'
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'donascimentomarcelo'
String imageName = "${dockerHubUsernameProperty}/spring-aws:$version"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}

cloudFormation {
	stackName "$project.name-stack"
	stackParams([
			SubnetID: findProperty('subnetId') ?: '',
			ServiceName: project.name,
			ServiceVersion: project.version,
			DockerHubUsername: dockerHubUsernameProperty
	])
	templateFile project.file("ecs.yml")
}